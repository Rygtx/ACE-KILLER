---
description: 
globs: 
alwaysApply: false
---
# 用户界面和系统交互

ACE-KILLER 使用系统托盘图标作为主要用户界面，并通过 Windows 通知系统提供反馈。

## 系统托盘实现

系统托盘功能在 [ui/tray_icon.py](mdc:ui/tray_icon.py) 中的 `create_tray_icon()` 函数实现：

```python
def create_tray_icon(monitor, icon_path):
    # 创建菜单项
    menu = Menu(
        MenuItem('状态信息', show_status, default=True),
        MenuItem('开启通知', toggle_notifications, checked=is_notifications_enabled),
        MenuItem('开机自启', toggle_auto_start, checked=is_auto_start_enabled),
        # ... 游戏菜单项 ...
        MenuItem('打开配置文件夹', open_config_dir),
        MenuItem('退出', exit_app)
    )
    
    # 创建托盘图标
    icon = Icon('ACE-KILLER', icon_img, 'ACE-KILLER', menu)
    return icon
```

## 系统通知功能

通知系统在 [utils/notification.py](mdc:utils/notification.py) 中实现：

```python
def send_notification(title, message, icon_path=None, buttons=None, silent=True):
    """发送 Windows 通知"""
    notification_helper = Win11ToastNotificationHelper()
    notification_helper.show_toast(
        title=title,
        message=message,
        icon_path=icon_path,
        buttons=buttons,
        silent=silent
    )
```

## 进程监控和优化

ACE-KILLER 通过后台线程监控和优化游戏和反作弊程序的进程：

1. 监控游戏进程 - 通过 `monitor_game_process()` 方法监控指定游戏进程
2. 优化扫盘进程 - 使用 `set_process_priority_and_affinity()` 方法设置 `SGuard64.exe` 进程优先级和 CPU 亲和性
3. 关闭反作弊弹窗 - 使用 `kill_process()` 方法关闭 `ACE-Tray.exe` 进程

## 系统注册表交互

ACE-KILLER 通过注册表实现开机自启功能，在 [core/system_utils.py](mdc:core/system_utils.py) 中实现：

- `check_auto_start()` - 检查是否已设置开机自启
- `enable_auto_start()` - 设置开机自启
- `disable_auto_start()` - 禁用开机自启

## 日志系统

日志系统在 [utils/logger.py](mdc:utils/logger.py) 中实现，使用 loguru 提供详细的日志记录：

```python
def setup_logger(log_dir, retention_days='7 days', rotation='1 day'):
    """设置日志系统"""
    # 确保日志目录存在
    os.makedirs(log_dir, exist_ok=True)
    
    # 配置日志
    logger.configure(
        handlers=[
            {"sink": os.path.join(log_dir, "ace-killer.log"), "rotation": rotation, "retention": retention_days},
            {"sink": sys.stderr, "level": "INFO"}
        ]
    )
```
