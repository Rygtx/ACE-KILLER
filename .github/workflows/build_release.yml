name: 构建和发布ACE-KILLER

permissions:
  contents: write
  packages: write
  
on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: 1.0.0)'
        required: true
        default: '1.0.0'
      release_notes:
        description: '发布说明'
        required: false
        default: '此版本包含性能改进和错误修复'

jobs:
  build:
    name: 构建Windows应用
    runs-on: windows-latest
    env:
      PYTHONIOENCODING: utf-8
      PYTHONLEGACYWINDOWSSTDIO: 1
      NUITKA_DOWNLOAD_CONFIRMATION: 1
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      PYTHONOPTIMIZE: 1
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 设置Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: 缓存Python依赖和构建工具
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: |
            ~/.cache/pip
            ~/.cache/Nuitka
            ~/.local/share/Nuitka
            ~/AppData/Local/pip/Cache
            ~/AppData/Local/Temp/pip-*
          key: ${{ runner.os }}-python313-deps-${{ hashFiles('requirements.txt') }}-v2
          restore-keys: |
            ${{ runner.os }}-python313-deps-
            ${{ runner.os }}-python-deps-

      - name: 检查缓存状态
        run: |
          if ($env:CACHE_HIT -eq 'true') {
            Write-Host "✅ 缓存命中，跳过部分安装步骤"
          } else {
            Write-Host "⚠️ 缓存未命中，将进行完整安装"
          }
        env:
          CACHE_HIT: ${{ steps.cache-deps.outputs.cache-hit }}
        shell: pwsh

      - name: 安装依赖
        timeout-minutes: 10  # 设置10分钟超时
        run: |
          Write-Host "🔄 开始安装Python依赖包..."
          Write-Host "⏰ 安装开始时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          
          # 升级pip并显示版本
          Write-Host "📦 升级pip..."
          python -m pip install --upgrade pip
          python -m pip --version
          
          # 安装wheel
          Write-Host "📦 安装wheel..."
          pip install wheel
          
          # 显示requirements.txt内容
          Write-Host "📋 requirements.txt内容:"
          Get-Content requirements.txt | ForEach-Object { Write-Host "  $_" }
          
          # 分组安装依赖以便调试
          Write-Host ""
          Write-Host "📦 安装基础依赖..."
          pip install --timeout 300 pywin32==310 pillow==11.2.1 psutil==7.0.0 pyyaml==6.0.2 loguru==0.7.3 packaging==24.1 requests==2.31.0
          
          Write-Host ""
          Write-Host "📦 安装Windows特定依赖..."
          
          # 先安装win11toast
          Write-Host "📦 安装win11toast..."
          pip install --timeout 120 win11toast==0.35
          
          Write-Host ""
          Write-Host "📦 安装PySide6 (这可能需要几分钟)..."
          $pyside6Start = Get-Date
          pip install --timeout 600 PySide6==6.9.0 --verbose
          $pyside6End = Get-Date
          $pyside6Duration = $pyside6End - $pyside6Start
          Write-Host "✅ PySide6安装完成，耗时: $($pyside6Duration.TotalMinutes.ToString('F2')) 分钟"
          
          Write-Host ""
          Write-Host "📦 安装构建工具..."
          pip install --timeout 300 nuitka==2.6.7 zstandard ordered-set
          
          # 验证关键包安装
          Write-Host ""
          Write-Host "🔍 验证关键包安装状态:"
          $packages = @('PySide6', 'nuitka', 'psutil', 'pillow', 'pywin32')
          foreach ($pkg in $packages) {
            try {
              $version = pip show $pkg | Select-String "Version:" | ForEach-Object { $_.ToString().Split()[1] }
              Write-Host "  ✅ $pkg : $version"
            } catch {
              Write-Warning "  ⚠️ $pkg : 检查失败"
            }

          }
          
          Write-Host ""
          Write-Host "⏰ 安装完成时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          Write-Host "🎉 所有依赖安装完成！"

      - name: 更新版本号
        run: |
          # 更新 VERSION 文件
          echo "${{ github.event.inputs.version }}" | Out-File -FilePath "VERSION" -Encoding utf8 -NoNewline
          Write-Host "✅ 已更新 VERSION 文件为: ${{ github.event.inputs.version }}"
          
          # 更新 utils/version_checker.py 中的版本号
          $versionCheckerPath = "utils/version_checker.py"
          if (Test-Path $versionCheckerPath) {
            (Get-Content -Path $versionCheckerPath -Raw) -replace '__version__ = ".*"', '__version__ = "${{ github.event.inputs.version }}"' | Set-Content -Path $versionCheckerPath -Encoding utf8
            Write-Host "✅ 已更新 version_checker.py 中的版本号"
          } else {
            Write-Warning "⚠️ 未找到 version_checker.py 文件"
          }
          
          # 验证版本号更新
          Write-Host "📋 VERSION 文件内容:"
          Get-Content "VERSION"
          
          Write-Host "📋 version_checker.py 中的版本号:"
          Select-String -Path $versionCheckerPath -Pattern '__version__ = ".*"'
        shell: pwsh
      
      - name: 清理构建环境
        run: |
          # 清理可能存在的构建文件
          if (Test-Path "main.dist") { Remove-Item -Recurse -Force "main.dist" }
          if (Test-Path "main.build") { Remove-Item -Recurse -Force "main.build" }
          if (Test-Path "main.onefile-build") { Remove-Item -Recurse -Force "main.onefile-build" }
          if (Test-Path "nuitka-crash-report.xml") { Remove-Item -Force "nuitka-crash-report.xml" }
          
          # 清理Python缓存
          Get-ChildItem -Path . -Recurse -Name "__pycache__" -ErrorAction SilentlyContinue | ForEach-Object { 
            try { Remove-Item -Recurse -Force $_ } catch { Write-Warning "无法删除: $_" }
          }
          Get-ChildItem -Path . -Recurse -Name "*.pyc" -ErrorAction SilentlyContinue | ForEach-Object { 
            try { Remove-Item -Force $_ } catch { Write-Warning "无法删除: $_" }
          }
          
          Write-Host "✅ 构建环境已清理"
        shell: pwsh

      - name: 使用Nuitka打包应用程序
        run: |
          # 设置版本号环境变量
          $env:ACE_KILLER_VERSION = "${{ github.event.inputs.version }}"
          Write-Host "🔧 设置环境变量 ACE_KILLER_VERSION=v${{ github.event.inputs.version }}"
          
          # 显示构建环境信息
          Write-Host "🌍 构建环境信息:"
          Write-Host "  - Python版本: $(python --version)"
          Write-Host "  - Nuitka版本: $(python -m nuitka --version)"
          Write-Host "  - 操作系统: $env:OS"
          Write-Host "  - 处理器架构: $env:PROCESSOR_ARCHITECTURE"
          Write-Host "  - 当前目录: $(Get-Location)"
          Write-Host "  - 可用内存: $([math]::Round((Get-WmiObject Win32_ComputerSystem).TotalPhysicalMemory / 1GB, 2)) GB"
          
          # 检查资源文件
          $icon_path = "assets/icon/favicon.ico"
          if (-not (Test-Path $icon_path)) {
            Write-Warning "⚠️ 主图标文件不存在: $icon_path"
          } else {
            Write-Host "✅ 找到主图标文件: $icon_path"
            $iconInfo = Get-Item $icon_path
            Write-Host "  - 图标文件大小: $($iconInfo.Length) 字节"
          }
          
          if (-not (Test-Path "assets/icon")) {
            Write-Error "❌ assets/icon目录不存在"
            exit 1
          } else {
            Write-Host "✅ 找到assets/icon资源目录"
            Write-Host "📁 assets/icon目录内容:"
            Get-ChildItem -Recurse "assets/icon" | Format-Table Name, FullName -AutoSize
          }
          
          # 显示主要源文件信息
          Write-Host "📋 主要源文件信息:"
          if (Test-Path "main.py") {
            $mainPySize = (Get-Item "main.py").Length
            Write-Host "  - main.py: $mainPySize 字节"
          }
          if (Test-Path "requirements.txt") {
            Write-Host "  - requirements.txt内容:"
            Get-Content "requirements.txt" | ForEach-Object { Write-Host "    $_" }
          }
          
          # 开始Nuitka构建，显示详细日志
          Write-Host ""
          Write-Host "🚀 开始Nuitka构建过程..."
          Write-Host "⏰ 构建开始时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          Write-Host "📝 构建命令参数:"
          Write-Host "  --standalone                        : 独立模式"
          Write-Host "  --assume-yes-for-downloads          : 自动下载依赖"
          Write-Host "  --windows-console-mode=disable      : 禁用控制台窗口"
          Write-Host "  --windows-icon-from-ico=$icon_path  : 设置应用图标"
          Write-Host "  --include-data-dir=assets/icon      : 包含资源目录"
          Write-Host "  --windows-uac-admin                 : 管理员权限"
          Write-Host "  --enable-plugin=pyside6             : 启用PySide6插件"
          Write-Host "  --lto=yes                           : 链接时优化"
          Write-Host "  --show-progress                     : 显示构建进度"
          Write-Host "  --show-memory                       : 显示内存使用"
          Write-Host "  --verbose                           : 详细输出"
          Write-Host ""
          
          $buildStartTime = Get-Date
          
          python -m nuitka --standalone `
            --assume-yes-for-downloads `
            --windows-console-mode=disable `
            --windows-icon-from-ico=$icon_path `
            --include-data-dir=assets/icon=assets/icon `
            --windows-uac-admin `
            --remove-output `
            --enable-plugin=pyside6 `
            --lto=yes `
            --jobs=$env:NUMBER_OF_PROCESSORS `
            --output-filename=ACE-KILLER.exe `
            --product-name="ACE-KILLER" `
            --product-version="${{ github.event.inputs.version }}" `
            --copyright="Copyright (c) 2025 CassianVale" `
            --nofollow-import-to=tkinter,PIL.ImageTk `
            --prefer-source-code `
            --python-flag=no_site `
            --python-flag=no_warnings `
            --show-progress `
            --show-memory `
            --verbose `
            --report=nuitka-build-report.xml `
            main.py
            
          $buildEndTime = Get-Date
          $buildDuration = $buildEndTime - $buildStartTime
          
          Write-Host ""
          Write-Host "⏰ 构建完成时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          Write-Host "⌛ 总构建时间: $($buildDuration.TotalMinutes.ToString('F2')) 分钟"
          
          # 检查构建报告
          if (Test-Path "nuitka-build-report.xml") {
            Write-Host "📊 构建报告已生成: nuitka-build-report.xml"
            $reportSize = (Get-Item "nuitka-build-report.xml").Length
            Write-Host "  - 报告文件大小: $reportSize 字节"
          }
          
          # 显示构建后的文件结构
          Write-Host ""
          Write-Host "📁 构建后的文件结构:"
          if (Test-Path "main.dist") {
            Write-Host "✅ main.dist 目录内容:"
            Get-ChildItem -Recurse "main.dist" | Where-Object { -not $_.PSIsContainer } | 
              Select-Object Name, @{Name="Size(MB)";Expression={[math]::Round($_.Length/1MB, 3)}}, FullName | 
              Format-Table -AutoSize
              
            $totalSize = (Get-ChildItem -Recurse "main.dist" | Measure-Object -Property Length -Sum).Sum
            Write-Host "📊 构建输出总大小: $([math]::Round($totalSize / 1MB, 2)) MB"
          }
          
          Write-Host "🎉 Nuitka构建过程完成！"
        shell: pwsh
        env:
          PYTHONIOENCODING: utf-8
          PYTHONLEGACYWINDOWSSTDIO: 1
          ACE_KILLER_VERSION: ${{ github.event.inputs.version }}

      - name: 验证构建结果
        run: |
          Write-Host "🔍 验证构建结果..."
          
          # 检查环境变量
          Write-Host "🌍 环境信息验证:"
          Write-Host "  - ACE_KILLER_VERSION: $env:ACE_KILLER_VERSION"
          Write-Host "  - 构建时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          
          # 检查VERSION文件
          if (Test-Path "VERSION") {
            $versionFileContent = Get-Content "VERSION" -Raw
            Write-Host "  - VERSION文件内容: '$versionFileContent'"
          }
          
          # 检查构建报告
          if (Test-Path "nuitka-build-report.xml") {
            Write-Host ""
            Write-Host "📊 构建报告分析:"
            try {
              [xml]$report = Get-Content "nuitka-build-report.xml"
              Write-Host "  - 报告文件: 已成功读取"
              # 可以添加更多报告解析逻辑
            } catch {
              Write-Warning "  - 无法解析构建报告: $($_.Exception.Message)"
            }
          } else {
            Write-Warning "⚠️ 构建报告文件未生成"
          }
          
          # 检查构建是否成功
          if (Test-Path "main.dist") {
            Write-Host ""
            Write-Host "✅ 构建目录验证通过"
            
            # 统计构建输出
            $distFiles = Get-ChildItem -Recurse "main.dist"
            $totalFiles = ($distFiles | Where-Object { -not $_.PSIsContainer }).Count
            $totalDirs = ($distFiles | Where-Object { $_.PSIsContainer }).Count
            $totalSize = ($distFiles | Where-Object { -not $_.PSIsContainer } | Measure-Object -Property Length -Sum).Sum
            
            Write-Host "📊 构建统计信息:"
            Write-Host "  - 文件总数: $totalFiles"
            Write-Host "  - 目录总数: $totalDirs"
            Write-Host "  - 总大小: $([math]::Round($totalSize / 1MB, 2)) MB"
            
            # 检查可执行文件
            if (Test-Path "main.dist/ACE-KILLER.exe") {
              $fileInfo = Get-Item "main.dist/ACE-KILLER.exe"
              $fileSizeMB = [math]::Round($fileInfo.Length / 1MB, 2)
              Write-Host ""
              Write-Host "✅ 主执行文件验证:"
              Write-Host "  - 文件名: ACE-KILLER.exe"
              Write-Host "  - 文件大小: ${fileSizeMB} MB"
              Write-Host "  - 创建时间: $($fileInfo.CreationTime.ToString('yyyy-MM-dd HH:mm:ss'))"
              Write-Host "  - 修改时间: $($fileInfo.LastWriteTime.ToString('yyyy-MM-dd HH:mm:ss'))"
              
              # 检查文件版本信息
              try {
                $versionInfo = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($fileInfo.FullName)
                if ($versionInfo) {
                  Write-Host "  - 产品名称: $($versionInfo.ProductName)"
                  Write-Host "  - 产品版本: $($versionInfo.ProductVersion)"
                  Write-Host "  - 文件版本: $($versionInfo.FileVersion)"
                  Write-Host "  - 版权信息: $($versionInfo.LegalCopyright)"
                }
              } catch {
                Write-Warning "  - 版本信息读取失败: $($_.Exception.Message)"
              }
            } else {
              Write-Error "❌ 可执行文件未找到"
              Write-Host "📁 main.dist目录内容:"
              Get-ChildItem "main.dist" | Format-Table Name, Length, LastWriteTime -AutoSize
              exit 1
            }
            
            # 检查重要的依赖文件
            Write-Host ""
            Write-Host "🔍 依赖文件检查:"
            $importantFiles = @(
              "PySide6/QtCore.pyd",
              "PySide6/QtGui.pyd", 
              "PySide6/QtWidgets.pyd"
            )
            
            foreach ($file in $importantFiles) {
              $filePath = "main.dist/$file"
              if (Test-Path $filePath) {
                $size = [math]::Round((Get-Item $filePath).Length / 1MB, 2)
                Write-Host "  ✅ $file ($size MB)"
              } else {
                Write-Warning "  ⚠️ $file (未找到)"
              }
            }
          } else {
            Write-Error "❌ 构建目录未找到"
            Write-Host "📁 当前目录内容:"
            Get-ChildItem | Format-Table Name, Length, LastWriteTime -AutoSize
            exit 1
          }
          
          Write-Host ""
          Write-Host "🎉 构建验证完成！"
        shell: pwsh
        env:
          ACE_KILLER_VERSION: ${{ github.event.inputs.version }}

      - name: 上传构建报告和日志
        uses: actions/upload-artifact@v4
        if: always()  # 即使构建失败也上传日志
        with:
          name: build-logs-v${{ github.event.inputs.version }}
          path: |
            nuitka-build-report.xml
            nuitka-crash-report.xml
          retention-days: 30
          if-no-files-found: ignore
          
      - name: 压缩可执行文件目录
        run: |
          $dist_dir = "main.dist"
          $zip_name = "ACE-KILLER-v${{ github.event.inputs.version }}-x64"
          $zip_path = "$zip_name.zip"
          
          if (Test-Path $dist_dir) {
            Compress-Archive -Path "$dist_dir/*" -DestinationPath $zip_path -Force
            if (Test-Path $zip_path) {
              $size_mb = (Get-Item $zip_path).Length / 1MB
              Write-Host "✅ 成功创建 $zip_path (大小: $([math]::Round($size_mb, 2)) MB)"
            } else {
              throw "压缩失败，未生成ZIP文件"
            }
          } else {
            throw "构建目录不存在，构建可能失败"
          }
        shell: pwsh
        
      - name: 创建发布
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: ACE-KILLER v${{ github.event.inputs.version }}
          body: |
            ### 🚀 更新日志
            ${{ github.event.inputs.release_notes }}
            
            ### 📥 安装说明
            1. 下载 zip 压缩包文件
            2. 解压到任意目录
            3. 右键点击 `ACE-KILLER.exe`，选择"以管理员身份运行"
            
            ### 🔍 如何检查更新
            1. 打开程序主界面
            2. 切换到"设置"选项卡
            3. 点击"检查更新"按钮
            4. 如有新版本会自动提示并可直接跳转下载
            
          # 添加覆盖选项
          draft: false
          prerelease: false
          files: |
            ACE-KILLER-v${{ github.event.inputs.version }}-x64.zip

