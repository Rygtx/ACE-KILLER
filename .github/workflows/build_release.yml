name: 构建和发布ACE-KILLER

permissions:
  contents: write
  packages: write
  
on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: 1.0.0)'
        required: true
        default: '1.0.0'
      release_notes:
        description: '发布说明'
        required: false
        default: '此版本包含性能改进和错误修复'

jobs:
  build:
    name: 构建Windows应用
    runs-on: windows-latest
    env:
      PYTHONIOENCODING: utf-8
      PYTHONLEGACYWINDOWSSTDIO: 1
      NUITKA_DOWNLOAD_CONFIRMATION: 1
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      PIP_NO_CACHE_DIR: 0
      PYTHONOPTIMIZE: 1
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 设置Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: 缓存PySide6和Nuitka
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: |
            ~/.cache/pip
            ~/.cache/Nuitka
            ~/.local/share/Nuitka
            ~/AppData/Local/pip/Cache
          key: ${{ runner.os }}-pyside6-nuitka-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pyside6-nuitka-

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip --quiet
          pip install wheel --quiet
          pip install -r requirements.txt --quiet
          pip install nuitka zstandard ordered-set --quiet

      - name: 更新版本号
        run: |
          $mainWindowPath = "ui/main_window.py"
          (Get-Content -Path $mainWindowPath -Raw) -replace '版本: 1.0.0', "版本: ${{ github.event.inputs.version }}" | Set-Content -Path $mainWindowPath -Encoding utf8
        shell: pwsh
      
      - name: 使用Nuitka打包应用程序
        run: |
          $icon_path = "assets/icon/favicon.ico"
          python -m nuitka --standalone `
            --assume-yes-for-downloads `
            --windows-console-mode=disable `
            --windows-icon-from-ico=$icon_path `
            --include-data-files=$icon_path=favicon.ico `
            --windows-uac-admin `
            --remove-output `
            --enable-plugin=pyside6 `
            --lto=yes `
            --jobs=$env:NUMBER_OF_PROCESSORS `
            --output-filename=ACE-KILLER.exe `
            --nofollow-import-to=tkinter,PIL.ImageTk `
            --prefer-source-code `
            --python-flag=no_site `
            --python-flag=no_warnings `
            main.py
        shell: pwsh
        env:
          PYTHONIOENCODING: utf-8
          PYTHONLEGACYWINDOWSSTDIO: 1
          
      - name: 压缩可执行文件目录
        run: |
          $dist_dir = "main.dist"
          $zip_name = "ACE-KILLER-v${{ github.event.inputs.version }}-x64"
          $zip_path = "$zip_name.zip"
          
          if (Test-Path $dist_dir) {
            Compress-Archive -Path "$dist_dir/*" -DestinationPath $zip_path -Force
            if (Test-Path $zip_path) {
              $size_mb = (Get-Item $zip_path).Length / 1MB
              Write-Host "✅ 成功创建 $zip_path (大小: $([math]::Round($size_mb, 2)) MB)"
            } else {
              throw "压缩失败，未生成ZIP文件"
            }
          } else {
            throw "构建目录不存在，构建可能失败"
          }
        shell: pwsh
        
      - name: 创建发布
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: ACE-KILLER v${{ github.event.inputs.version }}
          body: |
            ### 更新日志
            ${{ github.event.inputs.release_notes }}
            
            ### 安装说明
            1. 下载ZIP文件并解压
            2. 右键点击ACE-KILLER.exe，选择“以管理员身份运行”

          # 添加覆盖选项
          draft: false
          prerelease: false
          files: |
            ACE-KILLER-v${{ github.event.inputs.version }}-x64.zip
