name: 构建和发布ACE-KILLER

permissions:
  contents: write
  packages: write
  
on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: 1.0.0)'
        required: true
        default: '1.0.0'
      release_notes:
        description: '发布说明'
        required: false
        default: '此版本包含性能改进和错误修复'

jobs:
  build:
    name: 构建Windows应用
    runs-on: windows-latest
    env:
      PYTHONIOENCODING: utf-8
      PYTHONLEGACYWINDOWSSTDIO: 1
      NUITKA_DOWNLOAD_CONFIRMATION: 1
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      PYTHONOPTIMIZE: 1
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 设置Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: 缓存PySide6和Nuitka
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: |
            ~/.cache/pip
            ~/.cache/Nuitka
            ~/.local/share/Nuitka
            ~/AppData/Local/pip/Cache
          key: ${{ runner.os }}-pyside6-nuitka-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pyside6-nuitka-

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip --quiet
          pip install wheel --quiet
          pip install -r requirements.txt --quiet
          pip install nuitka zstandard ordered-set --quiet

      - name: 更新版本号
        run: |
          # 更新 VERSION 文件
          echo "${{ github.event.inputs.version }}" | Out-File -FilePath "VERSION" -Encoding utf8 -NoNewline
          Write-Host "✅ 已更新 VERSION 文件为: ${{ github.event.inputs.version }}"
          
          # 更新 utils/version_checker.py 中的版本号
          $versionCheckerPath = "utils/version_checker.py"
          if (Test-Path $versionCheckerPath) {
            (Get-Content -Path $versionCheckerPath -Raw) -replace '__version__ = ".*"', '__version__ = "${{ github.event.inputs.version }}"' | Set-Content -Path $versionCheckerPath -Encoding utf8
            Write-Host "✅ 已更新 version_checker.py 中的版本号"
          } else {
            Write-Warning "⚠️ 未找到 version_checker.py 文件"
          }
          
          # 验证版本号更新
          Write-Host "📋 VERSION 文件内容:"
          Get-Content "VERSION"
          
          Write-Host "📋 version_checker.py 中的版本号:"
          Select-String -Path $versionCheckerPath -Pattern '__version__ = ".*"'
        shell: pwsh
      
      - name: 清理构建环境
        run: |
          # 清理可能存在的构建文件
          if (Test-Path "main.dist") { Remove-Item -Recurse -Force "main.dist" }
          if (Test-Path "main.build") { Remove-Item -Recurse -Force "main.build" }
          if (Test-Path "main.onefile-build") { Remove-Item -Recurse -Force "main.onefile-build" }
          if (Test-Path "nuitka-crash-report.xml") { Remove-Item -Force "nuitka-crash-report.xml" }
          
          # 清理之前的日志文件
          if (Test-Path "nuitka_output.log") { Remove-Item -Force "nuitka_output.log" }
          if (Test-Path "nuitka_error.log") { Remove-Item -Force "nuitka_error.log" }
          
          # 清理Python缓存
          Get-ChildItem -Path . -Recurse -Name "__pycache__" -ErrorAction SilentlyContinue | ForEach-Object { 
            try { Remove-Item -Recurse -Force $_ } catch { Write-Warning "无法删除: $_" }
          }
          Get-ChildItem -Path . -Recurse -Name "*.pyc" -ErrorAction SilentlyContinue | ForEach-Object { 
            try { Remove-Item -Force $_ } catch { Write-Warning "无法删除: $_" }
          }
          
          # 清理临时构建目录
          Get-ChildItem -Path $env:TEMP -Name "nuitka_build_*" -ErrorAction SilentlyContinue | ForEach-Object {
            try { Remove-Item -Recurse -Force "$env:TEMP\$_" } catch { Write-Warning "无法删除临时目录: $_" }
          }
          
          Write-Host "✅ 构建环境已清理"
        shell: pwsh

      - name: 设置Windows构建环境
        run: |
          # 设置Windows环境变量以改善构建稳定性
          Write-Host "🔧 配置Windows构建环境..."
          
          # 设置编译器环境
          $env:CL = "/MP"  # 启用多处理器编译
          $env:LINK = "/MACHINE:X64"  # 明确指定64位
          
          # 设置Nuitka环境变量
          $env:NUITKA_CACHE_DIR = "$env:TEMP\nuitka_cache"
          if (-not (Test-Path $env:NUITKA_CACHE_DIR)) {
            New-Item -ItemType Directory -Path $env:NUITKA_CACHE_DIR -Force | Out-Null
          }
          
          # 设置更大的内存限制
          $env:NUITKA_MEMORY_USAGE = "2048"
          
          # 禁用某些可能引起权限问题的功能
          $env:NUITKA_DISABLE_CONSOLE_HANDLER = "1"
          
          Write-Host "✅ Windows构建环境已配置"
          Write-Host "CL: $env:CL"
          Write-Host "LINK: $env:LINK"
          Write-Host "NUITKA_CACHE_DIR: $env:NUITKA_CACHE_DIR"
          Write-Host "NUITKA_MEMORY_USAGE: $env:NUITKA_MEMORY_USAGE"
        shell: pwsh

      - name: 使用Nuitka打包应用程序
        run: |
          # 设置版本号环境变量
          $env:ACE_KILLER_VERSION = "v${{ github.event.inputs.version }}"
          Write-Host "🔧 设置环境变量 ACE_KILLER_VERSION= v"${{ github.event.inputs.version }}" "
          
          # 显示系统信息
          Write-Host "🖥️ 系统信息:"
          Write-Host "OS: $env:OS"
          Write-Host "Processor: $env:PROCESSOR_ARCHITECTURE"
          Write-Host "Username: $env:USERNAME"
          Write-Host "Temp Dir: $env:TEMP"
          Write-Host "Working Dir: $(Get-Location)"
          
          # 显示Python和Nuitka版本信息
          Write-Host "🐍 Python版本信息:"
          python --version
          python -c "import sys; print(f'Python路径: {sys.executable}')"
          # 使用命令行方式获取Nuitka版本信息，避免__version__属性问题
          try {
            $nuitkaVersion = python -m nuitka --version 2>&1 | Select-String "Nuitka" | Select-Object -First 1
            if ($nuitkaVersion) {
              Write-Host "Nuitka版本: $nuitkaVersion"
            } else {
              Write-Host "Nuitka版本: 已安装但无法获取版本信息"
            }
          } catch {
            Write-Host "Nuitka版本: 获取失败 - $($_.Exception.Message)"
          }
          
          # 检查磁盘空间
          Write-Host "💾 磁盘空间:"
          Get-WmiObject -Class Win32_LogicalDisk | Select-Object DeviceID, @{Name="Size(GB)";Expression={[math]::Round($_.Size/1GB,2)}}, @{Name="FreeSpace(GB)";Expression={[math]::Round($_.FreeSpace/1GB,2)}} | Format-Table
          
          # 检查资源文件
          $icon_path = "assets/icon/favicon.ico"
          if (-not (Test-Path $icon_path)) {
            Write-Warning "⚠️ 主图标文件不存在: $icon_path"
          } else {
            Write-Host "✅ 找到主图标文件: $icon_path"
            $iconInfo = Get-Item $icon_path
            Write-Host "📊 图标文件信息: 大小=${iconInfo.Length}字节, 创建时间=${iconInfo.CreationTime}"
          }
          
          if (-not (Test-Path "assets/icon")) {
            Write-Error "❌ assets/icon目录不存在"
            exit 1
          } else {
            Write-Host "✅ 找到assets/icon资源目录"
            Write-Host "📁 assets/icon目录内容:"
            Get-ChildItem -Recurse "assets/icon" | Format-Table Name, FullName -AutoSize
          }
          
          # 检查当前目录权限
          Write-Host "🔐 检查当前目录权限:"
          $acl = Get-Acl "."
          $acl.Access | Where-Object {$_.IdentityReference -like "*$env:USERNAME*"} | Format-Table IdentityReference, FileSystemRights, AccessControlType
          
          # 设置更宽松的临时目录权限
          Write-Host "🔧 设置临时目录:"
          $tempBuildDir = "$env:TEMP\nuitka_build_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
          New-Item -ItemType Directory -Path $tempBuildDir -Force | Out-Null
          Write-Host "临时构建目录: $tempBuildDir"
          
          # 开始Nuitka编译，添加详细日志
          Write-Host "🚀 开始Nuitka编译..."
          
          # 直接执行Nuitka命令，避免参数传递问题
          Write-Host "📋 执行编译命令..."
          
          try {
            # 使用PowerShell的调用操作符直接执行
            & python -m nuitka `
              --standalone `
              --assume-yes-for-downloads `
              --windows-console-mode=disable `
              --windows-icon-from-ico="$icon_path" `
              --include-data-dir=assets/icon=assets/icon `
              --windows-uac-admin `
              --remove-output `
              --enable-plugin=pyside6 `
              --lto=yes `
              --output-filename=ACE-KILLER.exe `
              --product-name="ACE-KILLER" `
              --product-version="${{ github.event.inputs.version }}" `
              --file-version="${{ github.event.inputs.version }}" `
              --file-description="ACE-KILLER - 反作弊进程优化工具" `
              --copyright="© 2025 CassianVale" `
              --trademarks="ACE-KILLER" `
              --nofollow-import-to=tkinter,PIL.ImageTk `
              --prefer-source-code `
              --python-flag=no_site `
              --python-flag=no_warnings `
              --disable-cache=all `
              --clean-cache=all `
              --show-scons `
              --show-progress `
              --show-memory `
              --report=compilation-report.xml `
              --mingw64 `
              --jobs=$env:NUMBER_OF_PROCESSORS `
              main.py
              
            $exitCode = $LASTEXITCODE
          } catch {
            Write-Host "❌ 执行命令时发生异常: $($_.Exception.Message)"
            $exitCode = 1
          }
          
          # 检查编译结果
          if ($exitCode -ne 0) {
            Write-Error "❌ Nuitka编译失败，退出代码: $exitCode"
            
            # 显示详细的崩溃报告
            if (Test-Path "nuitka-crash-report.xml") {
              Write-Host "📋 Nuitka完整崩溃报告:"
              Get-Content "nuitka-crash-report.xml" | ForEach-Object { Write-Host $_ }
            }
            
            # 显示编译环境信息
            Write-Host "🔍 编译环境诊断信息:"
            Write-Host "当前工作目录: $(Get-Location)"
            Write-Host "临时目录: $env:TEMP"
            Write-Host "用户名: $env:USERNAME"
            
            # 检查是否有部分构建文件
            if (Test-Path "main.build") {
              Write-Host "📁 找到部分构建目录:"
              Get-ChildItem "main.build" -Recurse | Select-Object -First 10 | Format-Table Name, FullName
            }
            
            # 检查磁盘空间
            Write-Host "💾 当前磁盘空间:"
            Get-WmiObject -Class Win32_LogicalDisk | Where-Object {$_.DeviceID -eq "C:"} | Select-Object @{Name="FreeSpace(GB)";Expression={[math]::Round($_.FreeSpace/1GB,2)}}
            
            exit 1
          }
          
          Write-Host "✅ Nuitka编译完成"
        shell: pwsh
        env:
          PYTHONIOENCODING: utf-8
          PYTHONLEGACYWINDOWSSTDIO: 1
          ACE_KILLER_VERSION: ${{ github.event.inputs.version }}
          CL: /MP
          LINK: /MACHINE:X64
          NUITKA_CACHE_DIR: C:\temp\nuitka_cache
          NUITKA_MEMORY_USAGE: 2048
          NUITKA_DISABLE_CONSOLE_HANDLER: 1

      - name: 验证构建结果
        run: |
          Write-Host "🔍 验证构建结果..."
          
          # 检查环境变量
          Write-Host "环境变量 ACE_KILLER_VERSION: $env:ACE_KILLER_VERSION"
          
          # 检查VERSION文件
          if (Test-Path "VERSION") {
            $versionFileContent = Get-Content "VERSION" -Raw
            Write-Host "VERSION文件内容: '$versionFileContent'"
          }
          
          # 检查构建是否成功
          if (Test-Path "main.dist") {
            Write-Host "✅ 构建目录存在"
            
            # 检查可执行文件
            if (Test-Path "main.dist/ACE-KILLER.exe") {
              $fileInfo = Get-Item "main.dist/ACE-KILLER.exe"
              $fileSizeMB = [math]::Round($fileInfo.Length / 1MB, 2)
              Write-Host "✅ 可执行文件已生成 (大小: ${fileSizeMB} MB)"
            } else {
              Write-Error "❌ 可执行文件未找到"
            }
          } else {
            Write-Error "❌ 构建目录未找到"
          }
        shell: pwsh
        env:
          ACE_KILLER_VERSION: ${{ github.event.inputs.version }}
          
      - name: 压缩可执行文件目录
        run: |
          $dist_dir = "main.dist"
          $zip_name = "ACE-KILLER-v${{ github.event.inputs.version }}-x64"
          $zip_path = "$zip_name.zip"
          
          if (Test-Path $dist_dir) {
            Compress-Archive -Path "$dist_dir/*" -DestinationPath $zip_path -Force
            if (Test-Path $zip_path) {
              $size_mb = (Get-Item $zip_path).Length / 1MB
              Write-Host "✅ 成功创建 $zip_path (大小: $([math]::Round($size_mb, 2)) MB)"
            } else {
              throw "压缩失败，未生成ZIP文件"
            }
          } else {
            throw "构建目录不存在，构建可能失败"
          }
        shell: pwsh
        
      - name: 创建发布
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: ACE-KILLER v${{ github.event.inputs.version }}
          body: |
            ### 🚀 更新日志
            ${{ github.event.inputs.release_notes }}
            
            ### 📥 安装说明
            1. 下载 zip 压缩包文件
            2. 解压到任意目录
            3. 右键点击 `ACE-KILLER.exe`，选择"以管理员身份运行"
            
            ### 🔍 如何检查更新
            1. 打开程序主界面
            2. 切换到"设置"选项卡
            3. 点击"检查更新"按钮
            4. 如有新版本会自动提示并可直接跳转下载
            
          # 添加覆盖选项
          draft: false
          prerelease: false
          files: |
            ACE-KILLER-v${{ github.event.inputs.version }}-x64.zip
